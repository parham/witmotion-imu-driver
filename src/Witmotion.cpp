//
// Created by phm on 14/10/24.
//

#include <cstring>

#include "Witmotion.h"

#define FuncW 0x06
#define FuncR 0x03

static const uint8_t __auchCRCHi[256] = {
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40
};

static const uint8_t __auchCRCLo[256] = {
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
        0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
        0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
        0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
        0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
        0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
        0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
        0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
        0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
        0x40
};

uint16_t toCRC16(uint8_t *puchMsg, uint16_t usDataLen) {
    uint8_t uchCRCHi = 0xFF;
    uint8_t uchCRCLo = 0xFF;
    uint8_t uIndex;
    int i = 0;
    uchCRCHi = 0xFF;
    uchCRCLo = 0xFF;
    for (; i<usDataLen; i++) {
        uIndex = uchCRCHi ^ puchMsg[i];
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
        uchCRCLo = __auchCRCLo[uIndex];
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
}

uint8_t caliSum(uint8_t *data, uint32_t len) {
    uint32_t i;
    uint8_t ucCheck = 0;
    for(i=0; i < len; i++) {
        ucCheck += *(data + i);
    }
    return ucCheck;
}

phm::witmotion::Witmotion::Witmotion(Protocol prot, Address addr) :
    protocol(prot), address(addr), readRegIndex(0), dataCounter(0) {
    // Empty body
}

void phm::witmotion::Witmotion::deplay(uint16_t timeMs) {
    usleep(timeMs*1000);
}

retcode phm::witmotion::Witmotion::begin() {
    return 0;
}

retcode phm::witmotion::Witmotion::end() {
    return 0;
}

retcode phm::witmotion::Witmotion::step() {
    return 0;
}

retcode phm::witmotion::Witmotion::receive() {
    uint8_t buff[1];
    // Read from serial port
    while (serialPtr->receive(buff, 1)) {
        read_(buff[0]);
    }
    // Process the received data

    return 0;
}

void phm::witmotion::Witmotion::read_(uint8_t ucData) {
    uint16_t usData[4];
    uint8_t ucSum;
    dataBuffer[dataCounter++] = ucData;
    if (protocol == Normal) {
        if (dataBuffer[0] != 0x55) {
            dataCounter--;
            memcpy(dataBuffer, &dataBuffer[1], dataCounter);
            return;
        }
        if (dataCounter >= 11) {
            ucSum = caliSum(dataBuffer, 10);
            if(ucSum != dataBuffer[10]) {
                dataCounter--;
                memcpy(dataBuffer, &dataBuffer[1], dataCounter);
                return;
            }
            usData[0] = ((uint16_t)dataBuffer[3] << 8) | (uint16_t)dataBuffer[2];
            usData[1] = ((uint16_t)dataBuffer[5] << 8) | (uint16_t)dataBuffer[4];
            usData[2] = ((uint16_t)dataBuffer[7] << 8) | (uint16_t)dataBuffer[6];
            usData[3] = ((uint16_t)dataBuffer[9] << 8) | (uint16_t)dataBuffer[8];
            copeWithData(dataBuffer[1], usData, 4);
            dataCounter = 0;
        }
        if(dataCounter == DATA_BUFF_SIZE) {
            dataCounter = 0;
        }
    } else {
        throw NotImplementedError((std::string &) "The protocol is not supported yet!");
    }
}

void phm::witmotion::Witmotion::copeWithData(uint8_t index, uint16_t *dt, uint32_t len) {
    uint32_t uiReg1 = 0, uiReg2 = 0, uiReg2Len = 0;
    uint16_t * p_usReg1Val = dt;
    uint16_t * p_usReg2Val = dt + 3;
    uint32_t uiReg1Len = 4;

    switch(index) {
        case WIT_ACC:
            uiReg1 = AX;
            uiReg1Len = 3;
            uiReg2 = TEMP;
            uiReg2Len = 1;
            break;
        case WIT_ANGLE:
            uiReg1 = Roll;
            uiReg1Len = 3;
            uiReg2 = VERSION;
            uiReg2Len = 1;
            break;
        case WIT_TIME:
            uiReg1 = YYMM;
            break;
        case WIT_GYRO:
            uiReg1 = GX;
            len = 3;
            break;
        case WIT_MAGNETIC:
            uiReg1 = HX;
            len = 3;
            break;
        case WIT_DPORT:
            uiReg1 = D0Status;
            break;
        case WIT_PRESS:
            uiReg1 = PressureL;
            break;
        case WIT_GPS:
            uiReg1 = LonL;
            break;
        case WIT_VELOCITY:
            uiReg1 = GPSHeight;
            break;
        case WIT_QUATER:
            uiReg1 = q0;
            break;
        case WIT_GSA:
            uiReg1 = SVNUM;
            break;
        case WIT_REGVALUE:
            uiReg1 = readRegIndex;
            break;
        default:
            return ;
    }
    if(len == 3) {
        uiReg1Len = 3;
        uiReg2Len = 0;
    }
    if(uiReg1Len) {
        memcpy(&regData[uiReg1], p_usReg1Val, uiReg1Len<<1);
        processData(uiReg1, uiReg1Len);
    }
    if(uiReg2Len) {
        memcpy(&regData[uiReg2], p_usReg2Val, uiReg2Len<<1);
        processData(uiReg2, uiReg2Len);
    }
}

void phm::witmotion::Witmotion::processData(uint32_t reg, uint32_t uiRegNum) {
//    int i;
//    for (i = 0; i < uiRegNum; i++) {
//        switch (reg) {
//            //            case AX:
//            //            case AY:
//            case AZ:
//                dataUpdateFlag |= ACC_UPDATE;
//                break;
//                //            case GX:
//                //            case GY:
//            case GZ:
//                dataUpdateFlag |= GYRO_UPDATE;
//                break;
//                //            case HX:
//                //            case HY:
//            case HZ:
//                s_cDataUpdate |= MAG_UPDATE;
//                break;
//                //            case Roll:
//                //            case Pitch:
//            case Yaw:
//                s_cDataUpdate |= ANGLE_UPDATE;
//                break;
//            default:
//                s_cDataUpdate |= READ_UPDATE;
//                break;
//        }
//        uiReg++;
//    }
}


